{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":639622,"sourceType":"datasetVersion","datasetId":316368}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('/kaggle/input'):\n#    for filename in filenames:\n #       print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-10-11T08:56:30.440072Z","iopub.execute_input":"2024-10-11T08:56:30.440630Z","iopub.status.idle":"2024-10-11T08:56:31.984483Z","shell.execute_reply.started":"2024-10-11T08:56:30.440570Z","shell.execute_reply":"2024-10-11T08:56:31.983098Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport librosa\nimport librosa.display\nfrom IPython.display import Audio\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T08:56:34.439121Z","iopub.execute_input":"2024-10-11T08:56:34.439855Z","iopub.status.idle":"2024-10-11T08:56:35.660466Z","shell.execute_reply.started":"2024-10-11T08:56:34.439799Z","shell.execute_reply":"2024-10-11T08:56:35.659090Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"paths = []\nlabels = []\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        paths.append(os.path.join(dirname, filename))\n        label = filename.split('_')[-1]\n        label = label.split('.')[0]\n        labels.append(label.lower())\n    if len(paths) == 2800:\n        break\nprint('Dataset is Loaded')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T08:56:48.428999Z","iopub.execute_input":"2024-10-11T08:56:48.429785Z","iopub.status.idle":"2024-10-11T08:56:49.274233Z","shell.execute_reply.started":"2024-10-11T08:56:48.429724Z","shell.execute_reply":"2024-10-11T08:56:49.272598Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"len(paths)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T08:56:59.362474Z","iopub.execute_input":"2024-10-11T08:56:59.363136Z","iopub.status.idle":"2024-10-11T08:56:59.375191Z","shell.execute_reply.started":"2024-10-11T08:56:59.363076Z","shell.execute_reply":"2024-10-11T08:56:59.373851Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"paths[:5]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T08:57:09.828492Z","iopub.execute_input":"2024-10-11T08:57:09.829978Z","iopub.status.idle":"2024-10-11T08:57:09.838534Z","shell.execute_reply.started":"2024-10-11T08:57:09.829900Z","shell.execute_reply":"2024-10-11T08:57:09.837123Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"labels[:5]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T08:57:20.049563Z","iopub.execute_input":"2024-10-11T08:57:20.050072Z","iopub.status.idle":"2024-10-11T08:57:20.060064Z","shell.execute_reply.started":"2024-10-11T08:57:20.050027Z","shell.execute_reply":"2024-10-11T08:57:20.058602Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"## Create a dataframe\ndf = pd.DataFrame()\ndf['speech'] = paths\ndf['label'] = labels\ndf.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T08:57:31.654287Z","iopub.execute_input":"2024-10-11T08:57:31.655502Z","iopub.status.idle":"2024-10-11T08:57:31.688964Z","shell.execute_reply.started":"2024-10-11T08:57:31.655438Z","shell.execute_reply":"2024-10-11T08:57:31.687663Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['label'].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T08:57:43.351312Z","iopub.execute_input":"2024-10-11T08:57:43.351991Z","iopub.status.idle":"2024-10-11T08:57:43.370908Z","shell.execute_reply.started":"2024-10-11T08:57:43.351934Z","shell.execute_reply":"2024-10-11T08:57:43.369493Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.countplot(data=df, x='label')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T08:57:55.419598Z","iopub.execute_input":"2024-10-11T08:57:55.420146Z","iopub.status.idle":"2024-10-11T08:57:55.810645Z","shell.execute_reply.started":"2024-10-11T08:57:55.420095Z","shell.execute_reply":"2024-10-11T08:57:55.809188Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def waveplot(data, sr, emotion):\n    plt.figure(figsize=(10,4))\n    plt.title(emotion, size=20)\n    librosa.display.waveshow(data, sr=sr)\n    plt.show()\n    \ndef spectogram(data, sr, emotion):\n    x = librosa.stft(data)\n    xdb = librosa.amplitude_to_db(abs(x))\n    plt.figure(figsize=(11,4))\n    plt.title(emotion, size=20)\n    librosa.display.specshow(xdb, sr=sr, x_axis='time', y_axis='hz')\n    plt.colorbar()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T08:58:11.905917Z","iopub.execute_input":"2024-10-11T08:58:11.906499Z","iopub.status.idle":"2024-10-11T08:58:11.917133Z","shell.execute_reply.started":"2024-10-11T08:58:11.906446Z","shell.execute_reply":"2024-10-11T08:58:11.915023Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"emotion = 'fear'\npath = np.array(df['speech'][df['label']==emotion])[0]\ndata, sampling_rate = librosa.load(path)\nwaveplot(data, sampling_rate, emotion)\nspectogram(data, sampling_rate, emotion)\nAudio(path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T08:58:23.646237Z","iopub.execute_input":"2024-10-11T08:58:23.648085Z","iopub.status.idle":"2024-10-11T08:58:45.305909Z","shell.execute_reply.started":"2024-10-11T08:58:23.648009Z","shell.execute_reply":"2024-10-11T08:58:45.304301Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"emotion = 'angry'\npath = np.array(df['speech'][df['label']==emotion])[1]\ndata, sampling_rate = librosa.load(path)\nwaveplot(data, sampling_rate, emotion)\nspectogram(data, sampling_rate, emotion)\nAudio(path)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T08:58:46.590171Z","iopub.execute_input":"2024-10-11T08:58:46.590784Z","iopub.status.idle":"2024-10-11T08:58:47.764025Z","shell.execute_reply.started":"2024-10-11T08:58:46.590717Z","shell.execute_reply":"2024-10-11T08:58:47.762699Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"emotion = 'disgust'\npath = np.array(df['speech'][df['label']==emotion])[0]\ndata, sampling_rate = librosa.load(path)\nwaveplot(data, sampling_rate, emotion)\nspectogram(data, sampling_rate, emotion)\nAudio(path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T08:58:52.120890Z","iopub.execute_input":"2024-10-11T08:58:52.121699Z","iopub.status.idle":"2024-10-11T08:58:53.395558Z","shell.execute_reply.started":"2024-10-11T08:58:52.121641Z","shell.execute_reply":"2024-10-11T08:58:53.393929Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"emotion = 'neutral'\npath = np.array(df['speech'][df['label']==emotion])[0]\ndata, sampling_rate = librosa.load(path)\nwaveplot(data, sampling_rate, emotion)\nspectogram(data, sampling_rate, emotion)\nAudio(path)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T08:59:04.191815Z","iopub.execute_input":"2024-10-11T08:59:04.192371Z","iopub.status.idle":"2024-10-11T08:59:05.477561Z","shell.execute_reply.started":"2024-10-11T08:59:04.192299Z","shell.execute_reply":"2024-10-11T08:59:05.475543Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"emotion = 'sad'\npath = np.array(df['speech'][df['label']==emotion])[0]\ndata, sampling_rate = librosa.load(path)\nwaveplot(data, sampling_rate, emotion)\nspectogram(data, sampling_rate, emotion)\nAudio(path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T08:59:45.682479Z","iopub.execute_input":"2024-10-11T08:59:45.683826Z","iopub.status.idle":"2024-10-11T08:59:46.967096Z","shell.execute_reply.started":"2024-10-11T08:59:45.683725Z","shell.execute_reply":"2024-10-11T08:59:46.965117Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"emotion = 'ps'\npath = np.array(df['speech'][df['label']==emotion])[0]\ndata, sampling_rate = librosa.load(path)\nwaveplot(data, sampling_rate, emotion)\nspectogram(data, sampling_rate, emotion)\nAudio(path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T09:00:20.616494Z","iopub.execute_input":"2024-10-11T09:00:20.617101Z","iopub.status.idle":"2024-10-11T09:00:21.855043Z","shell.execute_reply.started":"2024-10-11T09:00:20.617051Z","shell.execute_reply":"2024-10-11T09:00:21.853616Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"emotion = 'happy'\npath = np.array(df['speech'][df['label']==emotion])[0]\ndata, sampling_rate = librosa.load(path)\nwaveplot(data, sampling_rate, emotion)\nspectogram(data, sampling_rate, emotion)\nAudio(path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T09:00:33.025059Z","iopub.execute_input":"2024-10-11T09:00:33.025643Z","iopub.status.idle":"2024-10-11T09:00:34.255809Z","shell.execute_reply.started":"2024-10-11T09:00:33.025590Z","shell.execute_reply":"2024-10-11T09:00:34.254354Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def extract_mfcc(filename):\n    y, sr = librosa.load(filename, duration=3, offset=0.5)\n    mfcc = np.mean(librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40).T, axis=0)\n    return mfcc\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T09:00:52.768703Z","iopub.execute_input":"2024-10-11T09:00:52.769299Z","iopub.status.idle":"2024-10-11T09:00:52.777372Z","shell.execute_reply.started":"2024-10-11T09:00:52.769245Z","shell.execute_reply":"2024-10-11T09:00:52.775702Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"extract_mfcc(df['speech'][0])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T09:01:10.729714Z","iopub.execute_input":"2024-10-11T09:01:10.730275Z","iopub.status.idle":"2024-10-11T09:01:12.836453Z","shell.execute_reply.started":"2024-10-11T09:01:10.730223Z","shell.execute_reply":"2024-10-11T09:01:12.834274Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_mfcc = df['speech'].apply(lambda x: extract_mfcc(x))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T09:01:23.586691Z","iopub.execute_input":"2024-10-11T09:01:23.587603Z","iopub.status.idle":"2024-10-11T09:03:05.578552Z","shell.execute_reply.started":"2024-10-11T09:01:23.587541Z","shell.execute_reply":"2024-10-11T09:03:05.576295Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_mfcc","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T09:03:05.589829Z","iopub.execute_input":"2024-10-11T09:03:05.591300Z","iopub.status.idle":"2024-10-11T09:03:05.633206Z","shell.execute_reply.started":"2024-10-11T09:03:05.591196Z","shell.execute_reply":"2024-10-11T09:03:05.630810Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X = [x for x in X_mfcc]\nX = np.array(X)\nX.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T09:03:05.644677Z","iopub.execute_input":"2024-10-11T09:03:05.651495Z","iopub.status.idle":"2024-10-11T09:03:05.684004Z","shell.execute_reply.started":"2024-10-11T09:03:05.651360Z","shell.execute_reply":"2024-10-11T09:03:05.682106Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"## input split\nX = np.expand_dims(X, -1)\nX.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T09:03:05.694844Z","iopub.execute_input":"2024-10-11T09:03:05.695663Z","iopub.status.idle":"2024-10-11T09:03:05.705388Z","shell.execute_reply.started":"2024-10-11T09:03:05.695606Z","shell.execute_reply":"2024-10-11T09:03:05.703621Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.preprocessing import OneHotEncoder\nenc = OneHotEncoder()\ny = enc.fit_transform(df[['label']])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T09:03:05.707587Z","iopub.execute_input":"2024-10-11T09:03:05.708647Z","iopub.status.idle":"2024-10-11T09:03:05.798175Z","shell.execute_reply.started":"2024-10-11T09:03:05.708590Z","shell.execute_reply":"2024-10-11T09:03:05.796312Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T09:13:13.976986Z","iopub.execute_input":"2024-10-11T09:13:13.977620Z","iopub.status.idle":"2024-10-11T09:13:13.987709Z","shell.execute_reply.started":"2024-10-11T09:13:13.977565Z","shell.execute_reply":"2024-10-11T09:13:13.986092Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Dropout\n\nmodel = Sequential([\n    LSTM(256, return_sequences=False, input_shape=(40,1)),\n    Dropout(0.2),\n    Dense(128, activation='relu'),\n    Dropout(0.2),\n    Dense(64, activation='relu'),\n    Dropout(0.2),\n    Dense(7, activation='softmax')\n])\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T09:13:29.369046Z","iopub.execute_input":"2024-10-11T09:13:29.369655Z","iopub.status.idle":"2024-10-11T09:13:47.857217Z","shell.execute_reply.started":"2024-10-11T09:13:29.369597Z","shell.execute_reply":"2024-10-11T09:13:47.855922Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Train the model\nhistory = model.fit(X, y, validation_split=0.2, epochs=50, batch_size=64)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T09:13:54.225892Z","iopub.execute_input":"2024-10-11T09:13:54.227159Z","iopub.status.idle":"2024-10-11T09:17:49.601826Z","shell.execute_reply.started":"2024-10-11T09:13:54.227063Z","shell.execute_reply":"2024-10-11T09:17:49.600389Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"epochs = list(range(50))\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nplt.plot(epochs, acc, label='train accuracy')\nplt.plot(epochs, val_acc, label='val accuracy')\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.legend()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T09:17:57.459174Z","iopub.execute_input":"2024-10-11T09:17:57.460396Z","iopub.status.idle":"2024-10-11T09:17:57.779501Z","shell.execute_reply.started":"2024-10-11T09:17:57.460286Z","shell.execute_reply":"2024-10-11T09:17:57.777927Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"loss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.plot(epochs, loss, label='train loss')\nplt.plot(epochs, val_loss, label='val loss')\nplt.xlabel('epochs')\nplt.ylabel('loss')\nplt.legend()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T09:18:01.825637Z","iopub.execute_input":"2024-10-11T09:18:01.826232Z","iopub.status.idle":"2024-10-11T09:18:02.158194Z","shell.execute_reply.started":"2024-10-11T09:18:01.826180Z","shell.execute_reply":"2024-10-11T09:18:02.156775Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nimport matplotlib.pyplot as plt\n\n# Assuming your model is already trained\n# X_test should be defined and preprocessed correctly\n# y_test should also be defined as the true labels\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)  # Get the predicted probabilities\ny_pred_classes = np.argmax(y_pred, axis=1)  # Convert probabilities to class labels\n\n# If y_test is one-hot encoded, convert it to class labels as well\nif len(y_test.shape) > 1:\n    y_test = np.argmax(y_test, axis=1)\n\n# Calculate the confusion matrix\ncm = confusion_matrix(y_test, y_pred_classes)\n\n# Display the confusion matrix\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm)\ndisp.plot(cmap=plt.cm.Blues)  # You can choose a different color map\nplt.title('Confusion Matrix')\nplt.show()\n\n# Calculate test accuracy\ntest_accuracy = np.sum(y_pred_classes == y_test) / len(y_test)  # Calculate accuracy\nprint(f'Test accuracy: {test_accuracy:.2f}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T09:21:50.010467Z","iopub.execute_input":"2024-10-11T09:21:50.012448Z","iopub.status.idle":"2024-10-11T09:21:51.839684Z","shell.execute_reply.started":"2024-10-11T09:21:50.012370Z","shell.execute_reply":"2024-10-11T09:21:51.837957Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test, y_pred_classes))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T09:22:03.504834Z","iopub.execute_input":"2024-10-11T09:22:03.505464Z","iopub.status.idle":"2024-10-11T09:22:03.527443Z","shell.execute_reply.started":"2024-10-11T09:22:03.505410Z","shell.execute_reply":"2024-10-11T09:22:03.525476Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Calculate test accuracy\ntest_accuracy = np.sum(y_pred_classes == y_test) / len(y_test)  # Calculate accuracy\n\n# Convert accuracy to percentage\ntest_accuracy_percentage = test_accuracy * 100\n\n# Print the accuracy in percentage format\nprint(f'Test accuracy: {test_accuracy_percentage:.2f}%')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-11T16:14:33.666784Z","iopub.execute_input":"2024-10-11T16:14:33.667212Z","iopub.status.idle":"2024-10-11T16:14:34.021430Z","shell.execute_reply.started":"2024-10-11T16:14:33.667172Z","shell.execute_reply":"2024-10-11T16:14:34.019651Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[1], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Calculate test accuracy\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m test_accuracy \u001b[38;5;241m=\u001b[39m \u001b[43mnp\u001b[49m\u001b[38;5;241m.\u001b[39msum(y_pred_classes \u001b[38;5;241m==\u001b[39m y_test) \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mlen\u001b[39m(y_test)  \u001b[38;5;66;03m# Calculate accuracy\u001b[39;00m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Convert accuracy to percentage\u001b[39;00m\n\u001b[1;32m      5\u001b[0m test_accuracy_percentage \u001b[38;5;241m=\u001b[39m test_accuracy \u001b[38;5;241m*\u001b[39m \u001b[38;5;241m100\u001b[39m\n","\u001b[0;31mNameError\u001b[0m: name 'np' is not defined"],"ename":"NameError","evalue":"name 'np' is not defined","output_type":"error"}],"execution_count":1}]}